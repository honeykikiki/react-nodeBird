{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Avatar, Card } from 'antd';\nimport { END } from 'redux-saga';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport axios from 'axios';\nimport { LOAD_USER_POSTS_REQUEST } from '../../reducers/post';\nimport { LOAD_MY_INFO_REQUEST, LOAD_USER_REQUEST } from '../../reducers/user';\nimport PostCard from '../../components/PostCard';\nimport wrapper from '../../store/configureStore';\nimport AppLayout from '../../components/Applayout';\n\nconst User = () => {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading\n  } = useSelector(state => state.post);\n  const {\n    userInfo,\n    me\n  } = useSelector(state => state.user);\n  useEffect(() => {\n    function onScroll() {\n      // console.log(\n      //   window.scrollY,\n      //   document.documentElement.clientHeight,\n      //   document.documentElement.scrollHeight,\n      //   -300,\n      // );\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_USER_POSTS_REQUEST,\n            lastId,\n            data: id\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading, mainPosts, id]);\n  return __jsx(AppLayout, null, userInfo && __jsx(Head, null, __jsx(\"title\", null, userInfo.nickname, \"\\uB2D8\\uC758 \\uAE00\"), __jsx(\"meta\", {\n    name: \"description\",\n    content: `${userInfo.nickname}님의 게시글`\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: `${userInfo.nickname}님의 게시글`\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: `${userInfo.nickname}님의 게시글`\n  }), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: \"https://nodebird.com/favicon.ico\"\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    content: `https://nodebird.com/user/${id}`\n  })), userInfo && userInfo.id !== (me === null || me === void 0 ? void 0 : me.id) ? __jsx(Card, {\n    style: {\n      marginBottom: 20\n    },\n    actions: [__jsx(\"div\", {\n      key: \"twit\"\n    }, \"\\uC9F9\\uC9F9\", __jsx(\"br\", null), userInfo.Posts), __jsx(\"div\", {\n      key: \"following\"\n    }, \"\\uD314\\uB85C\\uC789\", __jsx(\"br\", null), userInfo.Followings), __jsx(\"div\", {\n      key: \"follower\"\n    }, \"\\uD314\\uB85C\\uC6CC\", __jsx(\"br\", null), userInfo.Followers)]\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, null, userInfo.nickname[0]),\n    title: userInfo.nickname\n  })) : null, mainPosts.map(c => __jsx(PostCard, {\n    key: c.id,\n    post: c\n  })));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(store => async ({\n  req,\n  params\n}) => {\n  const cookie = req ? req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  store.dispatch({\n    type: LOAD_USER_POSTS_REQUEST,\n    data: params.id\n  });\n  store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  store.dispatch({\n    type: LOAD_USER_REQUEST,\n    data: params.id\n  });\n  store.dispatch(END);\n  await store.sagaTask.toPromise();\n});\nexport default User;","map":{"version":3,"sources":["/Users/heoseongjin/Desktop/node_bird/prepare/front/pages/user/[id].js"],"names":["React","useEffect","useDispatch","useSelector","Avatar","Card","END","Head","useRouter","axios","LOAD_USER_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","LOAD_USER_REQUEST","PostCard","wrapper","AppLayout","User","dispatch","router","id","query","mainPosts","hasMorePosts","loadPostsLoading","state","post","userInfo","me","user","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","type","data","addEventListener","removeEventListener","nickname","marginBottom","Posts","Followings","Followers","map","c","getServerSideProps","store","req","params","cookie","headers","defaults","Cookie","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Avatar, Card } from 'antd';\nimport { END } from 'redux-saga';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\n\nimport axios from 'axios';\nimport { LOAD_USER_POSTS_REQUEST } from '../../reducers/post';\nimport { LOAD_MY_INFO_REQUEST, LOAD_USER_REQUEST } from '../../reducers/user';\nimport PostCard from '../../components/PostCard';\nimport wrapper from '../../store/configureStore';\nimport AppLayout from '../../components/Applayout';\n\nconst User = () => {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const { id } = router.query;\n  const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector((state) => state.post);\n  const { userInfo, me } = useSelector((state) => state.user);\n\n  useEffect(() => {\n    function onScroll() {\n      // console.log(\n      //   window.scrollY,\n      //   document.documentElement.clientHeight,\n      //   document.documentElement.scrollHeight,\n      //   -300,\n      // );\n      if (\n        window.scrollY + document.documentElement.clientHeight >\n        document.documentElement.scrollHeight - 300\n      ) {\n        if (hasMorePosts && !loadPostsLoading) {\n          const lastId = mainPosts[mainPosts.length - 1]?.id;\n          dispatch({\n            type: LOAD_USER_POSTS_REQUEST,\n            lastId,\n            data: id,\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading, mainPosts, id]);\n\n  return (\n    <AppLayout>\n      {userInfo && (\n        <Head>\n          <title>\n            {userInfo.nickname}\n            님의 글\n          </title>\n          <meta name=\"description\" content={`${userInfo.nickname}님의 게시글`} />\n          <meta property=\"og:title\" content={`${userInfo.nickname}님의 게시글`} />\n          <meta property=\"og:description\" content={`${userInfo.nickname}님의 게시글`} />\n          <meta property=\"og:image\" content=\"https://nodebird.com/favicon.ico\" />\n          <meta property=\"og:url\" content={`https://nodebird.com/user/${id}`} />\n        </Head>\n      )}\n      {userInfo && userInfo.id !== me?.id ? (\n        <Card\n          style={{ marginBottom: 20 }}\n          actions={[\n            <div key=\"twit\">\n              짹짹\n              <br />\n              {userInfo.Posts}\n            </div>,\n            <div key=\"following\">\n              팔로잉\n              <br />\n              {userInfo.Followings}\n            </div>,\n            <div key=\"follower\">\n              팔로워\n              <br />\n              {userInfo.Followers}\n            </div>,\n          ]}\n        >\n          <Card.Meta avatar={<Avatar>{userInfo.nickname[0]}</Avatar>} title={userInfo.nickname} />\n        </Card>\n      ) : null}\n      {mainPosts.map((c) => (\n        <PostCard key={c.id} post={c} />\n      ))}\n    </AppLayout>\n  );\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps((store) => async ({ req, params }) => {\n  const cookie = req ? req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n  if (req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n  store.dispatch({\n    type: LOAD_USER_POSTS_REQUEST,\n    data: params.id,\n  });\n  store.dispatch({\n    type: LOAD_MY_INFO_REQUEST,\n  });\n  store.dispatch({\n    type: LOAD_USER_REQUEST,\n    data: params.id,\n  });\n  store.dispatch(END);\n  await store.sagaTask.toPromise();\n});\n\nexport default User;\n"]},"metadata":{},"sourceType":"module"}