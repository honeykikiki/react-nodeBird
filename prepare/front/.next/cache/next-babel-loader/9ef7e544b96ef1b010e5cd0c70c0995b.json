{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, FOLLOW_REQUEST, UNFOLLOW_REQUEST } from '../reducers/user';\n\nfunction loginAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* login(action) {\n  try {\n    // const result = yield call(loginAPI, action.data); // loginAPI의 매개변수는 ()안에 들어가지 않고 a,c,v, 배열형식으로 들어간다\n    console.log('sagalogin');\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logoutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logout() {\n  try {\n    // const result = yield call(logoutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signupAPI() {\n  return axios.post('/api/signup');\n}\n\nfunction* signup() {\n  try {\n    // const result = yield call(signupAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnFollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unFollow);\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signup);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchFollow), fork(watchUnFollow), fork(watchLogin), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["/Users/heoseongjin/Desktop/node_bird/prepare/front/sagas/user.js"],"names":["all","delay","fork","put","takeLatest","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","FOLLOW_REQUEST","UNFOLLOW_REQUEST","loginAPI","data","post","login","action","console","log","type","err","error","response","logoutAPI","logout","signupAPI","signup","watchFollow","follow","watchUnFollow","unFollow","watchLogin","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport {\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_OUT_REQUEST,\n  LOG_OUT_SUCCESS,\n  LOG_OUT_FAILURE,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n  SIGN_UP_FAILURE,\n  FOLLOW_REQUEST,\n  UNFOLLOW_REQUEST,\n} from '../reducers/user';\n\nfunction loginAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* login(action) {\n  try {\n    // const result = yield call(loginAPI, action.data); // loginAPI의 매개변수는 ()안에 들어가지 않고 a,c,v, 배열형식으로 들어간다\n    console.log('sagalogin');\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction logoutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logout() {\n  try {\n    // const result = yield call(logoutAPI);\n    yield delay(1000);\n\n    yield put({\n      type: LOG_OUT_SUCCESS,\n      // data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction signupAPI() {\n  return axios.post('/api/signup');\n}\n\nfunction* signup() {\n  try {\n    // const result = yield call(signupAPI);\n    yield delay(1000);\n\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      // data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnFollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unFollow);\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signup);\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchFollow),\n    fork(watchUnFollow),\n    fork(watchLogin),\n    fork(watchLogOut),\n    fork(watchSignUp),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}