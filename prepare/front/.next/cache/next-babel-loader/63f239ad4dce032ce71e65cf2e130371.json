{"ast":null,"code":"import { all, delay, fork, put, take, takeEvery, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOG_IN_REQUEST, LOG_OUT_REQUEST } from '../reducers/user';\n\nfunction loginAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* login(action) {\n  try {\n    // const result = yield call(loginAPI, action.data); // loginAPI의 매개변수는 ()안에 들어가지 않고 a,c,v, 배열형식으로 들어간다\n    console.log('sagalogin');\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      error: action.data // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logoutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logout() {\n  try {\n    // const result = yield call(logoutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["/Users/heoseongjin/Desktop/node_bird/prepare/front/sagas/user.js"],"names":["all","delay","fork","put","take","takeEvery","takeLatest","axios","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOG_IN_REQUEST","LOG_OUT_REQUEST","loginAPI","data","post","login","action","console","log","type","error","err","response","logoutAPI","logout","watchLogin","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsCC,SAAtC,EAAiDC,UAAjD,QAAmE,oBAAnE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACEC,cADF,EAEEC,cAFF,EAGEC,eAHF,EAIEC,eAJF,EAKEC,cALF,EAMEC,eANF,QAOO,kBAPP;;AASA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOR,KAAK,CAACS,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAMnB,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEb,cADE;AAERc,MAAAA,KAAK,EAAEJ,MAAM,CAACH,IAFN,CAGR;;AAHQ,KAAD,CAAT;AAKD,GATD,CASE,OAAOQ,GAAP,EAAY;AACZ,UAAMpB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEZ,cADE;AAERa,MAAAA,KAAK,EAAEC,GAAG,CAACC,QAAJ,CAAaT;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,SAASU,SAAT,GAAqB;AACnB,SAAOlB,KAAK,CAACS,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUU,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMzB,KAAK,CAAC,IAAD,CAAX;AAEA,UAAME,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEX,eADE,CAER;;AAFQ,KAAD,CAAT;AAID,GARD,CAQE,OAAOa,GAAP,EAAY;AACZ,UAAMpB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEV,eADE;AAERI,MAAAA,IAAI,EAAEQ,GAAG,CAACC,QAAJ,CAAaT;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUY,UAAV,GAAuB;AACrB,QAAMrB,UAAU,CAACM,cAAD,EAAiBK,KAAjB,CAAhB;AACD;;AAED,UAAUW,WAAV,GAAwB;AACtB,QAAMtB,UAAU,CAACO,eAAD,EAAkBa,MAAlB,CAAhB;AACD;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAM7B,GAAG,CAAC,CAACE,IAAI,CAACyB,UAAD,CAAL,EAAmBzB,IAAI,CAAC0B,WAAD,CAAvB,CAAD,CAAT;AACD","sourcesContent":["import { all, delay, fork, put, take, takeEvery, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport {\n  LOG_IN_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_OUT_SUCCESS,\n  LOG_OUT_FAILURE,\n  LOG_IN_REQUEST,\n  LOG_OUT_REQUEST,\n} from '../reducers/user';\n\nfunction loginAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* login(action) {\n  try {\n    // const result = yield call(loginAPI, action.data); // loginAPI의 매개변수는 ()안에 들어가지 않고 a,c,v, 배열형식으로 들어간다\n    console.log('sagalogin');\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      error: action.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction logoutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logout() {\n  try {\n    // const result = yield call(logoutAPI);\n    yield delay(1000);\n\n    yield put({\n      type: LOG_OUT_SUCCESS,\n      // data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut)]);\n}\n"]},"metadata":{},"sourceType":"module"}