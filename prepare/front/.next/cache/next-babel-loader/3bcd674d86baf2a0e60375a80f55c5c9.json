{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport shortid, { generate } from 'shortid';\nimport { ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostsAPI(action) {\n  return axios.post('/api/post', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(action) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(action) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(action) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPosts)]);\n}","map":{"version":3,"sources":["/Users/heoseongjin/Desktop/node_bird/prepare/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","axios","shortid","generate","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","action","post","data","loadPosts","id","type","err","response","addPostAPI","addPost","content","removePostAPI","postId","removePost","addCommentAPI","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport shortid, { generate } from 'shortid';\n\nimport {\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  REMOVE_POST_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  ADD_COMMENT_REQUEST,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  LOAD_POSTS_FAILURE,\n  generateDummyPost,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostsAPI(action) {\n  return axios.post('/api/post', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10),\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(action) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n      },\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(action) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction addCommentAPI(action) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchAddComment),\n    fork(watchRemovePost),\n    fork(watchLoadPosts),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}