{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logout),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, delay, fork, put, take, takeEvery, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction loginAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction login(action) {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          // const result = yield call(loginAPI, action.data); // loginAPI의 매개변수는 ()안에 들어가지 않고 a,c,v, 배열형식으로 들어간다\n          console.log('sagalogin');\n          _context.next = 4;\n          return delay(1000);\n\n        case 4:\n          _context.next = 6;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: action.data // data: result.data,\n\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction logoutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction logout() {\n  return _regeneratorRuntime.wrap(function logout$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS // data: result.data,\n\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: LOG_OUT_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, logout);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/heoseongjin/Desktop/node_bird/prepare/front/sagas/user.js"],"names":["login","logout","watchLogin","watchLogOut","userSaga","all","delay","fork","put","take","takeEvery","takeLatest","axios","loginAPI","data","post","action","console","log","type","LOG_IN_SUCCESS","LOG_IN_FAILURE","response","logoutAPI","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOG_IN_REQUEST","LOG_OUT_REQUEST"],"mappings":";;oDAOUA,K;qDAsBAC,M;qDAiBAC,U;qDAIAC,W;qDAIeC,Q;;AAtDzB,SAASC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsCC,SAAtC,EAAiDC,UAAjD,QAAmE,oBAAnE;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD;;AAED,SAAUd,KAAV,CAAgBgB,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAHJ;AAII,iBAAMZ,KAAK,CAAC,IAAD,CAAX;;AAJJ;AAAA;AAKI,iBAAME,GAAG,CAAC;AACRW,YAAAA,IAAI,EAAEC,cADE;AAERN,YAAAA,IAAI,EAAEE,MAAM,CAACF,IAFL,CAGR;;AAHQ,WAAD,CAAT;;AALJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAWI,iBAAMN,GAAG,CAAC;AACRW,YAAAA,IAAI,EAAEE,cADE;AAERP,YAAAA,IAAI,EAAE,YAAIQ,QAAJ,CAAaR;AAFX,WAAD,CAAT;;AAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAASS,SAAT,GAAqB;AACnB,SAAOX,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,SAAUd,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMK,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAKI,iBAAME,GAAG,CAAC;AACRW,YAAAA,IAAI,EAAEK,eADE,CAER;;AAFQ,WAAD,CAAT;;AALJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUI,iBAAMhB,GAAG,CAAC;AACRW,YAAAA,IAAI,EAAEM,eADE;AAERX,YAAAA,IAAI,EAAE,aAAIQ,QAAJ,CAAaR;AAFX,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUZ,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMS,UAAU,CAACe,cAAD,EAAiB1B,KAAjB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMQ,UAAU,CAACgB,eAAD,EAAkB1B,MAAlB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACE,IAAI,CAACL,UAAD,CAAL,EAAmBK,IAAI,CAACJ,WAAD,CAAvB,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, delay, fork, put, take, takeEvery, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction loginAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* login(action) {\n  try {\n    // const result = yield call(loginAPI, action.data); // loginAPI의 매개변수는 ()안에 들어가지 않고 a,c,v, 배열형식으로 들어간다\n    console.log('sagalogin');\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction logoutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logout() {\n  try {\n    // const result = yield call(logoutAPI);\n    yield delay(1000);\n\n    yield put({\n      type: LOG_OUT_SUCCESS,\n      // data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut)]);\n}\n"]},"metadata":{},"sourceType":"module"}