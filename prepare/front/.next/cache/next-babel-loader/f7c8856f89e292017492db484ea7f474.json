{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createMiddleWare from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas'; // const loggerMiddelWare =\n//   ({ dispatch, getState }) =>\n//   (next) =>\n//   (action) => {\n//     console.log(action);\n//     return next(action);\n//   };\n\nconst configureStore = () => {\n  const sagaMiddleware = createMiddleWare();\n  const middlewares = [sagaMiddleware];\n  const ebhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, ebhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: false\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/heoseongjin/Desktop/node_bird/prepare/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","composeWithDevTools","createMiddleWare","reducer","rootSaga","configureStore","sagaMiddleware","middlewares","ebhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,gBAAP,MAA6B,YAA7B;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAMC,cAAc,GAAGJ,gBAAgB,EAAvC;AACA,QAAMK,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,QAAME,QAAQ,GACZ,QACIT,OAAO,CAACD,eAAe,CAAC,GAAGS,WAAJ,CAAhB,CADX,GAEIN,mBAAmB,CAACH,eAAe,CAAC,GAAGS,WAAJ,CAAhB,CAHzB;AAKA,QAAME,KAAK,GAAGT,WAAW,CAACG,OAAD,EAAUK,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBP,QAAnB,CAAjB;AAEA,SAAOK,KAAP;AACD,CAZD;;AAcA,MAAMG,OAAO,GAAGf,aAAa,CAACQ,cAAD,EAAiB;AAC5CQ,EAAAA,KAAK;AADuC,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport createMiddleWare from 'redux-saga';\n\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\n// const loggerMiddelWare =\n//   ({ dispatch, getState }) =>\n//   (next) =>\n//   (action) => {\n//     console.log(action);\n//     return next(action);\n//   };\n\nconst configureStore = () => {\n  const sagaMiddleware = createMiddleWare();\n  const middlewares = [sagaMiddleware];\n  const ebhancer =\n    process.env.NODE_ENV === 'production'\n      ? compose(applyMiddleware(...middlewares))\n      : composeWithDevTools(applyMiddleware(...middlewares));\n\n  const store = createStore(reducer, ebhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: process.env.NODE_ENV === 'devlopment',\n});\n\nexport default wrapper;\n"]},"metadata":{},"sourceType":"module"}